import { NextRequest, NextResponse } from "next/server";
import { database } from "@time-tracker/api";

// GET /api/v1/employee - Get all employees (Insightful API format)
export async function GET(request: NextRequest) {
  try {
    const { data, error } = await database.getEmployees();
    
    if (error) {
      return NextResponse.json(
        { error: error.message || "Failed to fetch employees" },
        { status: 500 }
      );
    }

    // Transform to Insightful format
    const insightfulEmployees = data?.map(emp => ({
      id: emp.id,
      name: emp.name,
      organizationId: process.env.ORGANIZATION_ID || "default",
      projects: [], // Will be populated from project assignments
      deactivated: emp.status === 'inactive' ? Date.now() : undefined,
      invited: emp.status === 'pending' ? Date.now() : undefined,
      createdAt: new Date(emp.created_at).getTime(),
      type: "personal", // Default type
    })) || [];

    return NextResponse.json(insightfulEmployees);
  } catch (error: any) {
    console.error("Employee fetch error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to fetch employees" },
      { status: 500 }
    );
  }
}

// POST /api/v1/employee - Create new employee (Insightful API format)
export async function POST(request: NextRequest) {
  try {
    const { name, teamsId, sharedSettingsId, projects } = await request.json();
    
    if (!name) {
      return NextResponse.json(
        { error: "Employee name is required" },
        { status: 400 }
      );
    }

    // Generate a temporary email for the employee
    const tempEmail = `${name.toLowerCase().replace(/\s+/g, '.')}@company.com`;

    const { data, error } = await database.createEmployee({
      email: tempEmail,
      name,
      activation_token: undefined, // Will be generated by the system
    });

    if (error) {
      return NextResponse.json(
        { error: error.message || "Failed to create employee" },
        { status: 500 }
      );
    }

    // Transform to Insightful format
    const insightfulEmployee = {
      id: data[0].id,
      name: data[0].name,
      organizationId: process.env.ORGANIZATION_ID || "default",
      projects: projects || [],
      teamsId,
      sharedSettingsId,
      createdAt: new Date(data[0].created_at).getTime(),
      type: "personal",
    };

    return NextResponse.json(insightfulEmployee, { status: 201 });
  } catch (error: any) {
    console.error("Employee creation error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to create employee" },
      { status: 500 }
    );
  }
} 